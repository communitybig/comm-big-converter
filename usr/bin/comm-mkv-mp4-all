#!/bin/bash

# Color and style formatting
bold='\033[1m'
italic='\033[3m'
underline='\033[4m'
blue='\033[0;34m'
green='\033[0;32m'
red='\033[0;31m'
yellow='\033[0;33m'
cyan='\033[0;36m'
magenta='\033[0;35m'
noColor='\033[0m'

# Version
ver="1.1.1"


# --- Start Configuration

# Path to the converter - CENTRALIZED VARIABLE
converter_cmd="/usr/bin/comm-converter"

# Maximum number of simultaneous processes
max_procs=2

# Minimum MP4 file size in KB (default: 1MB)
min_mp4_size=1024

# Default directory for searching MKV files (default: current directory)
search_dir="."

# Log file
log_file="mkv-mp4-convert.log"

# --- End Configuration

# Function to display help
show_help() {
    create_box "${magenta}HELP - MKV ➡️ MP4 CONVERSION SCRIPT${noColor}" "$cyan"
    echo ""
    echo -e "${green}Usage:${noColor} $0 [options]"
    echo ""
    echo -e "${green}Options:${noColor}"
    echo -e "  ${yellow}-h, --help${noColor}            Display this help message"
    echo -e "  ${yellow}-d, --dir${noColor} DIRECTORY   Directory to search for MKV files (default: current directory)"
    echo -e "  ${yellow}-p, --procs${noColor} NUMBER    Maximum number of simultaneous processes (default: 2)"
    echo -e "  ${yellow}-s, --size${noColor} SIZE       Minimum MP4 file size in KB (default: 1024)"
    echo -e "  ${yellow}-l, --log${noColor} FILE        Log file (default: mkv-mp4-convert.log)"
    echo -e "  ${yellow}-c, --converter${noColor} PATH  Path to the converter (default: /usr/bin/comm-converter)"
    echo ""
}

# Process command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--dir)
            if [ -n "$2" ] && [ -d "$2" ]; then
                search_dir="$2"
                shift 2
            else
                create_box "Error: Invalid directory: $2" "$red"
                exit 1
            fi
            ;;
        -p|--procs)
            if [ -n "$2" ] && [[ "$2" =~ ^[0-9]+$ ]]; then
                max_procs="$2"
                shift 2
            else
                create_box "Error: Invalid number of processes: $2" "$red"
                exit 1
            fi
            ;;
        -s|--size)
            if [ -n "$2" ] && [[ "$2" =~ ^[0-9]+$ ]]; then
                min_mp4_size="$2"
                shift 2
            else
                create_box "Error: Invalid minimum size: $2" "$red"
                exit 1
            fi
            ;;
        -l|--log)
            if [ -n "$2" ]; then
                log_file="$2"
                shift 2
            else
                create_box "Error: Invalid log file name: $2" "$red"
                exit 1
            fi
            ;;
        -c|--converter)
            if [ -n "$2" ]; then
                converter_cmd="$2"
                shift 2
            else
                create_box "Error: Invalid converter path: $2" "$red"
                exit 1
            fi
            ;;
        *)
            create_box "Unknown option: $1" "$red"
            show_help
            exit 1
            ;;
    esac
done

# Function to create a box
create_box() {
    local message="$1"
    local color="$2"
    
    local clean_message=$(echo -e "$message" | sed 's/\x1b\[[0-9;]*m//g')
    local width=$((${#clean_message} + 4))
    
    echo -e "${color}┌$([[ $width -gt 2 ]] && printf '─%.0s' $(seq 1 $width))┐${noColor}"
    echo -e "${color}│  ${message}  ${color}│${noColor}"
    echo -e "${color}└$([[ $width -gt 2 ]] && printf '─%.0s' $(seq 1 $width))┘${noColor}"
}

# Function to create a multiline box
create_multiline_box() {
    local content="$1"
    local color="$2"
    local title="$3"
    
    local max_width=0
    while IFS= read -r line; do
        local clean_line=$(echo -e "$line" | sed 's/\x1b\[[0-9;]*m//g')
        local line_length=${#clean_line}
        if (( line_length > max_width )); then
            max_width=$line_length
        fi
    done <<< "$content"

    max_width=$((max_width + 4))

    echo -e "${color}┌$([[ $max_width -gt 2 ]] && printf '─%.0s' $(seq 1 $max_width))┐${noColor}"
    if [ -n "$title" ]; then
        echo -e "${color}│ ${yellow}$title${color} $(printf ' %.0s' $(seq 1 $((max_width - ${#title} - 2))))│${noColor}"
        echo -e "${color}├$([[ $max_width -gt 2 ]] && printf '─%.0s' $(seq 1 $max_width))┤${noColor}"
    fi
    while IFS= read -r line; do
        printf "${color}│  ${magenta}%-*s${color}  │${noColor}\n" $((max_width-4)) "$line"
    done <<< "$content"
    echo -e "${color}└$([[ $max_width -gt 2 ]] && printf '─%.0s' $(seq 1 $max_width))┘${noColor}"
}

# Function to detect GPU type
detect_gpu() {
    local gpu_info=$(lspci | grep -iE 'vga|3d|2d')
    if echo "$gpu_info" | grep -qi 'nvidia'; then
        echo "NVIDIA"
    elif echo "$gpu_info" | grep -qi 'intel'; then
        echo "Intel"
    elif echo "$gpu_info" | grep -qi 'amd'; then
        echo "AMD"
    else
        echo "Unknown"
    fi
}

# Function to log messages
log_message() {
    local msg="$1"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $msg" >> "$log_file"
}

# Function to convert a file
convert_file() {
    local input_file="$1"
    create_box "Converting: ${yellow}$input_file${noColor}" "$blue"
    log_message "Starting conversion: $input_file"
    
    # Determine the output MP4 filename
    local output_file="${input_file%.mkv}.mp4"
    
    # Set trap for SIGINT (Ctrl+C) and other important signals
    trap 'handle_interrupt "$input_file"' INT TERM

    # Conversion method without codec verification (works on all GPUs)
    audio_handling=reencode audio_bitrate=160k $converter_cmd "$input_file"
    
    local conversion_status=$?
    
    # Check if conversion was successful AND the MP4 file exists
    if [ $conversion_status -eq 0 ] && [ -f "$output_file" ]; then
        # Check if the MP4 file has a reasonable size
        local mp4_size=$(du -k "$output_file" | cut -f1)
        
        if [ $mp4_size -ge $min_mp4_size ]; then
            create_box "Conversion successful: ${green}$input_file${noColor}" "$green"
            create_box "MP4 file created (${mp4_size}KB): ${green}$output_file${noColor}" "$green"
            log_message "Conversion successful: $input_file -> $output_file (${mp4_size}KB)"
            
            # Remove the original MKV file
            rm -f "$input_file"
            if [ $? -eq 0 ]; then
                create_box "Original MKV file removed: ${red}$input_file${noColor}" "$green"
                log_message "Original MKV file removed: $input_file"
            else
                create_box "Error removing the original MKV file: $input_file" "$red"
                log_message "ERROR: Failed to remove original MKV file: $input_file"
            fi
        else
            create_box "MP4 file created, but too small (${mp4_size}KB): ${red}$output_file${noColor}" "$red"
            create_box "Original MKV preserved: ${yellow}$input_file${noColor}" "$yellow"
            log_message "WARNING: MP4 file too small (${mp4_size}KB < ${min_mp4_size}KB): $output_file - MKV preserved"
        fi
    else
        create_box "Conversion error: ${red}$input_file${noColor}" "$red"
        if [ ! -f "$output_file" ]; then
            create_box "MP4 file was not created: ${red}$output_file${noColor}" "$red"
            log_message "ERROR: Conversion failed, MP4 not created: $input_file"
        else
            log_message "ERROR: Conversion failed: $input_file (status: $conversion_status)"
        fi
    fi

    # Remove the trap after the conversion process
    trap - INT TERM
}

# Function to handle interruptions
handle_interrupt() {
    local input_file="$1"
    create_box "Conversion process interrupted: ${red}$input_file${noColor}" "$red"
    log_message "INTERRUPTED: Conversion interrupted by user: $input_file"
    exit 1
}

### Main Script ###
clear

# Check if converter command exists
if ! command -v $converter_cmd &> /dev/null; then
    create_box "Error: Command '$converter_cmd' not found." "$red"
    exit 1
fi

# Start log
echo "=== Starting MKV to MP4 conversion script v$ver on $(date) ===" > "$log_file"
log_message "Search directory: $search_dir"
log_message "Simultaneous processes: $max_procs"
log_message "Minimum MP4 size: ${min_mp4_size}KB"
log_message "Converter used: $converter_cmd"

# Display header
create_box "${magenta}MKV ➡️ MP4 CONVERSION SCRIPT${noColor} - Version: ${yellow}$ver${noColor}" "$cyan"
echo ""

# Show detected GPU type
gpu_type=$(detect_gpu)
create_box "Detected GPU: ${magenta}$gpu_type${noColor}" "$cyan"
log_message "Detected GPU: $gpu_type"

# Display settings
echo -e "${cyan}Settings:${noColor}"
echo -e "- Search directory: ${yellow}$search_dir${noColor}"
echo -e "- Simultaneous processes: ${yellow}$max_procs${noColor}"
echo -e "- Minimum MP4 size: ${yellow}${min_mp4_size}KB${noColor}"
echo -e "- Log file: ${yellow}$log_file${noColor}"
echo -e "- Converter: ${yellow}$converter_cmd${noColor}"
echo ""

# Find all MKV files and store in an array
mapfile -t mkv_files < <(find "$search_dir" -type f -name "*.mkv")

# Check if files were found
if [ ${#mkv_files[@]} -eq 0 ]; then
    create_box "No MKV files found in: $search_dir" "$yellow"
    log_message "No MKV files found in: $search_dir"
    exit 0
fi

# Show number of files found
create_box "Found ${yellow}${#mkv_files[@]}${noColor} MKV files." "$blue"
log_message "Found ${#mkv_files[@]} MKV files for conversion"

# Print all MKV files found
mkv_file_list=$(printf '%s\n' "${mkv_files[@]}")
create_multiline_box "$mkv_file_list" "$cyan" "MKV files found:"
echo ""

# Initialize counters
counter=0
success_counter=0
failure_counter=0

# Convert each file
for file in "${mkv_files[@]}"; do
    ((counter++))
    create_box "File #$counter: ${yellow}$file${noColor}" "$blue"
    
    # Call convert_file function in background
    convert_file "$file" &

    # Check number of background processes
    while [ $(jobs -rp | wc -l) -ge $max_procs ]; do
        # Wait for a background process to finish
        wait -n
    done
done

# Wait for all background processes to finish before exiting the script
wait

# Count successes and failures in the log
success_counter=$(grep -c "Conversion successful" "$log_file")
failure_counter=$(grep -c "ERROR: Conversion failed" "$log_file")
warning_counter=$(grep -c "WARNING: MP4 file too small" "$log_file")

create_box "Total files processed: ${magenta}$counter${noColor}" "$green"
create_box "Files successfully converted: ${green}$success_counter${noColor}" "$green"
if [ $failure_counter -gt 0 ]; then
    create_box "Files with conversion failure: ${red}$failure_counter${noColor}" "$red"
fi
if [ $warning_counter -gt 0 ]; then
    create_box "Files with warning (too small): ${yellow}$warning_counter${noColor}" "$yellow"
fi

create_box "Conversion process completed. See log at: ${yellow}$log_file${noColor}" "$blue"

# Finalize log
log_message "Finished. Total: $counter, Success: $success_counter, Failures: $failure_counter, Warnings: $warning_counter"